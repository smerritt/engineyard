
Customizing deploys with ey.yml
===============================

ey.yml is a file that lives in your application's config/
directory. It allows you to customize the deploy process to a limited,
but still useful, extent.


Examples
========

All these examples assume your environment is “myapp_staging”. Replace
that with your environment's actual name.

To avoid copying your .git directory with each release, put this in
your config/ey.yml:

---
environments:
  myapp_staging:
    copy_exclude:
      - .git

To set a default branch to deploy, put this in your config/ey.yml:

---
environments:
  myapp_staging:
    branch: master


To use thor to run migrations, but to only run them when you specify
--migrate, use this:

---
environments:
  myapp_staging:
    migration_command: thor db:migrate
    migrate: false


Fields of Note
==============

The engineyard gem pays attention to four keys in the per-environment
hash. They are:

 * copy_exclude (array): items that will be excluded when copying from
   your repository to each release. See rsync(1), in particular the
   --exclude option, for more details. Default is to not exclude
   anything.

 * branch (string): the branch to deploy by
   default. Default is "master".

 * migration_command (string): the command to invoke in order to run
   migrations. Default is "rake db:migrate".

 * migrate (boolean): whether or not to run migrations. Default is
   true.


Structure
=========

config/ey.yml is (of course) a YAML document. It is a hash with a
single top-level key "environments" whose value is another hash
mapping environment names to hashes containing customizations for that
environment.

Look at the examples; they're a whole lot clearer than the preceding
paragraph.


Passing Values to Deploy Hooks
==============================

Anything you set in the per-environment hash is available to your
deploy hooks. That is, if your config/ey.yml looks like this:

---
environments:
  myapp_staging:
    food: fish
    form: sticks

then, in your deploy hook, @configuration['food'] == 'fish' and
@configuration['form'] == 'sticks'.

Of course, any data structure that can be represented in YAML can go
into the per-environment configuration; you're not limited to simple
strings.
